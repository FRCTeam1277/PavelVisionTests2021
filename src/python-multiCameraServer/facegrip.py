import cv2
import numpy
import math
from enum import Enum

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """
        self.__new_size_width = 100.0
        self.__new_size_height = 100.0

        self.new_size_output = None



        self.__cascade_classifier_scale_factor = 1.1
        self.__cascade_classifier_min_neighbors = 2.0
        self.__cascade_classifier_min_size = self.new_size_output
        self.__cascade_classifier_max_size = (0, 0)

        self.cascade_classifier_output = None


    def process(self, source0, source1):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step New_Size0:
        (self.new_size_output) = self.__new_size(self.__new_size_width, self.__new_size_height)

        # Step Cascade_Classifier0:
        self.__cascade_classifier_image = source0
        self.__cascade_classifier_classifier = source1
        self.__cascade_classifier_min_size = self.new_size_output
        (self.cascade_classifier_output) = self.__cascade_classifier(self.__cascade_classifier_image, self.__cascade_classifier_classifier, self.__cascade_classifier_scale_factor, self.__cascade_classifier_min_neighbors, self.__cascade_classifier_min_size, self.__cascade_classifier_max_size)


    @staticmethod
    def __new_size(width, height):
        """Fills a size with given width and height.
		Args:
            width: A number for the width.
            height: A number for the height.
        Returns:
            A list of two numbers that represent a size.
        """
        return (width, height)

    @staticmethod
    def __cascade_classifier(input, classifier, scale_factor, min_neighbors, min_size, max_size):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            classifier: The classifier to use
            scale_factor: the scale factor of each successive downsized image
            min_neighbors: how many neighbors each candidate rectangle should have to retain it
            min_size: the minimum possible object size
            max_size: the maximum possible object size. If (0, 0), it is assumed to be unbounded
        Return:
            A list of rectangles bounding the found regions of interest
        """
        return classifier.detectMultiScale(input, scale_factor, min_neighbors, 0, min_size, max_size)



